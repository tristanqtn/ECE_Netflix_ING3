package Modele;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;

import Entite.Membre;

public class BDD_exploitant {

	// "root", "H!Jsihcl7YfTtp+SvKgo"

	private BDD_interface connexion;

	public BDD_exploitant(String utilisateur, String mdp, boolean reset_BDD) throws SQLException {
		connexion = new BDD_interface(utilisateur, mdp);
		if (reset_BDD) {
			connexion.executer_maj("DROP DATABASE `netflix`;");
			connexion.executer_script_sql("/sql/generation_schema.sql");
			connexion.executer_script_sql("/sql/donnees.sql");
		}
	}

	private ResultSet obtenir_films() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.films");
	}

	private ResultSet obtenir_documentaires() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.documentaires");
	}

	@SuppressWarnings("unused")
	private ResultSet obtenir_episodes() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.episodes");
	}

	private ResultSet obtenir_membres() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.membres");
	}

	@SuppressWarnings("unused")
	private ResultSet obtenir_saisons() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.saisons");
	}

	@SuppressWarnings("unused")
	private ResultSet obtenir_series() {
		return connexion.executer_requete("SELECT * FROM NETFLIX.series");
	}

	public void afficher_films() throws SQLException {
		// ResultSet is initially before the first data set

		ResultSet resultat = obtenir_films();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer duree = resultat.getInt("duree");
			Integer time_code = resultat.getInt("time_code");

			double note = resultat.getDouble("note");

			Date parution = resultat.getDate("parution");

			String realisateur = resultat.getString("realisateur");
			String acteur = resultat.getString("acteur");
			String genres = resultat.getString("genres");
			String titre = resultat.getString("titre");
			String synopsis = resultat.getString("synopsis");
			String video = resultat.getString("video");
			String trailer = resultat.getString("trailer");

			System.out.println(" ++ FILMS ++ ");
			System.out.println("ID: " + id);
			System.out.println("Duree: " + duree);
			System.out.println("Time Code: " + time_code);

			System.out.println("Note: " + note);

			System.out.println("Date: " + parution);

			System.out.println("Realisateur: " + realisateur);
			System.out.println("Acteurs: " + acteur);
			System.out.println("Genres: " + genres);
			System.out.println("Titre: " + titre);
			System.out.println("Synopsis: " + synopsis);
			System.out.println("Video: " + video);
			System.out.println("Trailer: " + trailer);
		}
	}

	public void afficher_documentaires() throws SQLException {
		// ResultSet is initially before the first data set
		ResultSet resultat = obtenir_documentaires();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer duree = resultat.getInt("duree");
			Integer time_code = resultat.getInt("time_code");

			double note = resultat.getDouble("note");

			Date parution = resultat.getDate("parution");

			String realisateur = resultat.getString("realisateur");
			String acteur = resultat.getString("acteur");
			String genres = resultat.getString("genres");
			String titre = resultat.getString("titre");
			String synopsis = resultat.getString("synopsis");
			String video = resultat.getString("video");
			String trailer = resultat.getString("trailer");

			System.out.println(" ++ DOCUMENTAIRES ++ ");
			System.out.println("ID: " + id);
			System.out.println("Duree: " + duree);
			System.out.println("Time Code: " + time_code);

			System.out.println("Note: " + note);

			System.out.println("Date: " + parution);

			System.out.println("Realisateur: " + realisateur);
			System.out.println("Acteurs: " + acteur);
			System.out.println("Genres: " + genres);
			System.out.println("Titre: " + titre);
			System.out.println("Synopsis: " + synopsis);
			System.out.println("Video: " + video);
			System.out.println("Trailer: " + trailer);
		}
	}

	public void afficher_series() throws SQLException {
		// ResultSet is initially before the first data set
		ResultSet resultat = obtenir_series();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer duree = resultat.getInt("duree");
			Integer time_code = resultat.getInt("time_code");
			Integer nb_saison = resultat.getInt("nombre_saison");
			Integer episode_en_cours = resultat.getInt("episode_en_cours");

			double note = resultat.getDouble("note");

			Date parution = resultat.getDate("parution");

			String realisateur = resultat.getString("realisateur");
			String acteur = resultat.getString("acteur");
			String genres = resultat.getString("genres");
			String titre = resultat.getString("titre");
			String synopsis = resultat.getString("synopsis");
			String video = resultat.getString("video");
			String trailer = resultat.getString("trailer");

			System.out.println(" ++ Serie ++ ");
			System.out.println("ID: " + id);
			System.out.println("Duree: " + duree);
			System.out.println("Time Code: " + time_code);

			System.out.println("Note: " + note);

			System.out.println("Date: " + parution);

			System.out.println("NB Saisons: " + nb_saison);
			System.out.println("Episode en cours: " + episode_en_cours);

			System.out.println("Realisateur: " + realisateur);
			System.out.println("Acteurs: " + acteur);
			System.out.println("Genres: " + genres);
			System.out.println("Titre: " + titre);
			System.out.println("Synopsis: " + synopsis);
			System.out.println("Video: " + video);
			System.out.println("Trailer: " + trailer);
		}
	}

	public void afficher_saisons() throws SQLException {
		// ResultSet is initially before the first data set
		ResultSet resultat = obtenir_saisons();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer serie = resultat.getInt("serie");
			Integer num_saison = resultat.getInt("num_saison");
			Integer nombre_episode = resultat.getInt("nombre_episode");

			System.out.println(" ++ Saison ++ ");
			System.out.println("ID: " + id);
			System.out.println("Serie: " + serie);
			System.out.println("Num saison: " + num_saison);
			System.out.println("Nombre Episode: " + nombre_episode);
		}
	}

	public void afficher_episodes() throws SQLException {
		// ResultSet is initially before the first data set
		ResultSet resultat = obtenir_episodes();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer saison = resultat.getInt("saison");
			Integer duree = resultat.getInt("duree");
			Integer time_code = resultat.getInt("time_code");
			Integer num_episode = resultat.getInt("numero_episode");

			double note = resultat.getDouble("note");

			Date parution = resultat.getDate("parution");

			String realisateur = resultat.getString("realisateur");
			String acteur = resultat.getString("acteur");
			String genres = resultat.getString("genres");
			String titre = resultat.getString("titre");
			String synopsis = resultat.getString("synopsis");
			String video = resultat.getString("video");
			String trailer = resultat.getString("trailer");

			System.out.println(" ++ Episode ++ ");
			System.out.println("ID: " + id);
			System.out.println("Duree: " + duree);
			System.out.println("Time Code: " + time_code);

			System.out.println("Note: " + note);

			System.out.println("Date: " + parution);

			System.out.println("Saison: " + saison);
			System.out.println("Numero Episode: " + num_episode);

			System.out.println("Realisateur: " + realisateur);
			System.out.println("Acteurs: " + acteur);
			System.out.println("Genres: " + genres);
			System.out.println("Titre: " + titre);
			System.out.println("Synopsis: " + synopsis);
			System.out.println("Video: " + video);
			System.out.println("Trailer: " + trailer);
		}
	}

	public void afficher_membres() throws SQLException {
		// ResultSet is initially before the first data set
		ResultSet resultat = obtenir_membres();

		while (resultat.next()) {
			// It is possible to get the columns via name
			// also possible to get the columns via the column number
			// which starts at 1
			// e.g. resultSet.getSTring(2);
			Integer id = resultat.getInt("ID");
			Integer tel = resultat.getInt("telephone");

			double num_carte = resultat.getDouble("num_carte");

			String mail = resultat.getString("adresse_mail");
			String mdp = resultat.getString("mdp");
			String nom = resultat.getString("nom");
			String preferences = resultat.getString("preferences");
			String prenom = resultat.getString("prenom");

			System.out.println(" ++ DOCUMENTAIRES ++ ");
			System.out.println("ID: " + id);
			System.out.println("Tel: " + tel);

			System.out.println("CB: " + num_carte);

			System.out.println("Mail: " + mail);
			System.out.println("MDP: " + mdp);
			System.out.println("Nom: " + nom);
			System.out.println("Preference: " + preferences);
			System.out.println("Prenom: " + prenom);
		}
	}

	public Vector<Membre> extraire_membre_BDD() throws SQLException {

		Vector<Membre> liste_membres = new Vector<Membre>();
		ResultSet resultat = obtenir_membres();

		while (resultat.next()) {
			liste_membres.add(new Membre(resultat.getInt("ID"), resultat.getString("nom"), resultat.getString("prenom"),
					resultat.getString("adresse_mail"), resultat.getInt("telephone"), resultat.getDouble("num_carte"),
					resultat.getString("preferences"), resultat.getString("mdp")));
		}
		return liste_membres;

	}

	public BDD_interface get_connexion() {
		return connexion;
	}

	public void set_connexion(BDD_interface connexion) {
		this.connexion = connexion;
	}

}
